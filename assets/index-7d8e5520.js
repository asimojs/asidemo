import{x as o,F as n}from"./index-526c1df5.js";function m(t){return async function(e,i){if(e==="/api/team/teamA"){const a={type:"GetTeamResponse",team:{id:t.data.teamId,name:t.data.teamName,members:Object.getOwnPropertyNames(t.data.users).map(r=>t.data.users[r])}};return new Response(JSON.stringify(a))}else if(e==="/api/tasks/teamA"){const a={type:"GetTasksResponse",tasks:[{id:"T1",description:"Eat",completed:!1,createdBy:"USR1"},{id:"T2",description:"Drink",completed:!1,createdBy:"USR1"},{id:"T3",description:"Deploy",completed:!1,createdBy:"USR1"},{id:"T4",description:"Watch TV",completed:!1,createdBy:"USR1"},{id:"T5",description:"Repeat!",completed:!1,createdBy:"USR1"}]};return new Response(JSON.stringify(a))}else console.log(`Unsupported fetch mock: ${e}`);return fetch(e,i)}}const p={teamId:"",teamName:"",users:{}};class c{constructor(){this._profile=1,this._profileCount=2,this.data=p}get profile(){return this._profile}setProfile(s,e=!0){s>0&&s<=this._profileCount&&(this._profile=s),this.data=[d,l][this._profile-1],o.registerService(n,()=>m(this)),e&&console.log("%c Mock Environment:%c profile #%d","color:#2d7bf0;font-weight:bold","color:orange",this._profile)}}const S=new c,d={teamId:"TS1",teamName:"The Simpsons",users:{USR1:{id:"USR1",firstName:"Homer",lastName:"Simpson"},USR2:{id:"USR2",firstName:"Marge",lastName:"Simpson"},USR3:{id:"USR3",firstName:"Bart",lastName:"Simpson"},USR4:{id:"USR4",firstName:"Lisa",lastName:"Simpson"},USR5:{id:"USR5",firstName:"Maggie",lastName:"Simpson"}}},l={teamId:"TS2",teamName:"The Simpsons (very very very very very very very very long name)",users:{USR1:{id:"USR1",firstName:"Homer",lastName:"Simpson"},USR2:{id:"USR2",firstName:"Marge",lastName:"Simpson"}}};export{c as MockService,S as mockEnv};
